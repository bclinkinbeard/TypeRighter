// Generated by CoffeeScript 1.3.3
var TypeRighter,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

TypeRighter = (function() {

  function TypeRighter() {
    this.parse = __bind(this.parse, this);

    this.getCallbacksForPath = __bind(this.getCallbacksForPath, this);

    this.registerPath = __bind(this.registerPath, this);

    this.reset = __bind(this.reset, this);
    this._pathRegistry = {};
  }

  TypeRighter.prototype.reset = function() {
    return this._pathRegistry = {};
  };

  TypeRighter.prototype.registerPath = function(path, callback) {
    var paths, _i, _len, _path, _results;
    paths = _.isArray(path) ? path : path.split(', ').join(',').split(',');
    _results = [];
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      _path = paths[_i];
      this._pathRegistry[_path] = this._pathRegistry[_path] || [];
      _results.push(this._pathRegistry[_path].push(callback));
    }
    return _results;
  };

  TypeRighter.prototype.getCallbacksForPath = function(path) {
    var k, results, v, _ref;
    results = [];
    _ref = this._pathRegistry;
    for (k in _ref) {
      v = _ref[k];
      if (path.substr(-k.length) === k) {
        results = v;
        break;
      }
    }
    return results;
  };

  TypeRighter.prototype.parse = function(data, path, pathList) {
    var _this = this;
    if (path == null) {
      path = '';
    }
    if (pathList == null) {
      pathList = [];
    }
    _.each(data, function(value, key, list) {
      var callback, _i, _len, _path, _ref;
      _path = path;
      if (path !== '' && !_.isArray(list)) {
        _path += '.';
      }
      if (!_.isArray(list)) {
        _path += key;
      }
      if (pathList.indexOf(_path) < 0) {
        pathList.push(_path);
      }
      if (!_.isArray(value)) {
        _ref = _this.getCallbacksForPath(_path);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          callback = _ref[_i];
          callback.call(value, list[key], key, list);
        }
      }
      if (_.isObject(value)) {
        return _this.parse(list[key], _path, pathList);
      }
    });
    this.pathList = pathList;
    return data;
  };

  TypeRighter.type = function(type) {
    return function(value, key, scope) {
      return scope[key] = _.extend(new type(), value);
    };
  };

  TypeRighter.replaceWith = function(f) {
    if (_.isFunction(f)) {
      return function(value, key, scope) {
        return scope[key] = f.apply(value, arguments);
      };
    } else {
      return function(value, key, scope) {
        return scope[key] = f;
      };
    }
  };

  return TypeRighter;

}).call(this);
